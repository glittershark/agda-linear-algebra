{-# OPTIONS --cubical-compatible --safe #-}

module Algebra.VectorSpace.Structures where

open import Algebra
open import Algebra.Core using (Op‚ÇÅ; Op‚ÇÇ)
open import Algebra.Apartness
open import Algebra.Module
open import Relation.Binary.Core using (Rel)
open import Level using (_‚äî_)

module _ {s ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (overField : HeytingField s ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where
  open HeytingField overField renaming (_‚âà_ to _‚âà‚Çõ_; Carrier to Scalar; _+_ to _+‚Çõ_; _*_ to _*‚Çõ_; -_ to -‚Çõ_)

  record IsVectorSpace {v ‚Ñì‚ÇÉ} {Vector : Set v} (_‚âà_ : Rel Vector ‚Ñì‚ÇÉ)
                       (_+_ : Op‚ÇÇ Vector) (-_ : Op‚ÇÅ Vector) (_*‚Çó_ : Op‚Çó Scalar Vector)
                       (_*·µ£_ : Op·µ£ Scalar Vector) (0ùïç : Vector) : Set (v ‚äî s ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ) where
    scalarCommutativeRing : CommutativeRing s ‚Ñì‚ÇÅ
    scalarCommutativeRing =
      record
      { Carrier = Scalar
      ; _‚âà_ = _‚âà‚Çõ_
      ; _+_ = _+‚Çõ_
      ; _*_ = _*‚Çõ_
      ; -_ = -‚Çõ_
      ; 0# = 0#
      ; 1# = 1#
      ; isCommutativeRing = isCommutativeRing
      }
    field
      isModule : IsModule scalarCommutativeRing _‚âà_ _+_ 0ùïç -_ _*‚Çó_ _*·µ£_
