{-# OPTIONS --cubical-compatible --safe #-}

module Algebra.VectorSpace.Bundles where
open import Algebra.Apartness
open import Algebra.Core
open import Algebra.Module
open import Algebra.VectorSpace.Structures
open import Level
open import Relation.Binary.Core using (Rel)

record VectorSpaceOver {s ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (scalarField : HeytingField s ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) v ‚Ñì‚ÇÉ : Set (suc (v ‚äî s ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)) where
  open HeytingField scalarField renaming (_‚âà_ to _‚âà‚Çõ_; Carrier to Scalar; _+_ to _+‚Çõ_; _*_ to _*‚Çõ_; -_ to -‚Çõ_)

  infix  8 -_
  infixl 7 _*‚Çó_ _*·µ£_
  infixl 6 _+_
  infix  4 _‚âà_
  field
    Vector : Set v
    _‚âà_           : Rel Vector ‚Ñì‚ÇÉ
    _+_           : Op‚ÇÇ Vector
    -_            : Op‚ÇÅ Vector
    _*‚Çó_          : Op‚Çó Scalar Vector
    _*·µ£_          : Op·µ£ Scalar Vector
    0ùïç            : Vector
    isVectorSpace : IsVectorSpace scalarField _‚âà_ _+_ -_ _*‚Çó_ _*·µ£_ 0ùïç

record VectorSpace s v ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Set (suc (v ‚äî s ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ ‚äî ‚Ñì‚ÇÉ)) where
  infix  8 -_ -‚Çõ_
  infixl 7 _*‚Çó_ _*·µ£_
  infixl 6 _+_
  infix  4 _‚âà_
  field
    Vector : Set v
    Scalar : Set s
    _‚âà‚Çõ_  : Rel Scalar ‚Ñì‚ÇÅ
    _#‚Çõ_  : Rel Scalar ‚Ñì‚ÇÇ
    _‚âà_  : Rel Vector ‚Ñì‚ÇÉ
    _+_  : Op‚ÇÇ Vector
    _+‚Çõ_  : Op‚ÇÇ Scalar
    _*‚Çõ_  : Op‚ÇÇ Scalar
    -_   : Op‚ÇÅ Vector
    -‚Çõ_   : Op‚ÇÅ Scalar
    0# : Scalar
    1# : Scalar
    _*‚Çó_ : Op‚Çó Scalar Vector
    _*·µ£_ : Op·µ£ Scalar Vector
    0ùïç   : Vector
    isHeytingField : IsHeytingField _‚âà‚Çõ_ _#‚Çõ_ _+‚Çõ_ _*‚Çõ_ -‚Çõ_ 0# 1#

  scalarField : HeytingField s ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
  scalarField =
    record
    { Carrier = Scalar
    ; _‚âà_ = _‚âà‚Çõ_
    ; _#_ = _#‚Çõ_
    ; _+_ = _+‚Çõ_
    ; _*_ = _*‚Çõ_
    ; -_ = -‚Çõ_
    ; 0# = 0#
    ; 1# = 1#
    ; isHeytingField = isHeytingField
    }

  field
    isVectorSpace : IsVectorSpace scalarField _‚âà_ _+_ -_ _*‚Çó_ _*·µ£_ 0ùïç

  vectorSpaceOver : VectorSpaceOver scalarField v ‚Ñì‚ÇÉ
  vectorSpaceOver =
    record
    { Vector = Vector
    ; _‚âà_ = _‚âà_
    ; _+_ = _+_
    ; -_ = -_
    ; _*‚Çó_ = _*‚Çó_
    ; _*·µ£_ = _*·µ£_
    ; 0ùïç = 0ùïç
    ; isVectorSpace = isVectorSpace
    }
